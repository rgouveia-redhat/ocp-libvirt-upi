---

# openshift-install
- name: Get the pull secret in a a variable - version with registry credentials
  ansible.builtin.shell:
    cmd: cat registry/pull-secret.json | jq -c .
  register: pull_secret

- debug:
    var: pull_secret
  tags:
    - debug

- name: Get the SSH public key in a a variable
  ansible.builtin.command:
    cmd: cat /root/.ssh/id_rsa.pub
  register: ssh_public_key

# - debug:
#    var: ssh_public_key
#  tags:
#    - debug

- name: Get the CA cert in a a variable
  ansible.builtin.command:
    cmd: awk '{$1="  "$1}1' /root/CA/CA_cert.pem
  register: ca_cert

- debug:
    var: ca_cert
  tags:
    - debug

- name: Assemble the install-config.yaml
  ansible.builtin.template:
    src: files/ocp-install/install-config.yaml.j2
    dest: /root/install-config.yaml
    owner: root
    group: root
    mode: '0644'
    backup: false


# Ignition files

# Checking for existing run. Remove folder to repeat.
- name: Test existence of existing files
  ansible.builtin.stat:
    path: /root/{{ cluster_name }}/auth
  register: ignition_files

- name: Generate and prepare ignition files
  when: not ignition_files.stat.exists
  block:

  - name: Create folder for cluster
    ansible.builtin.file:
      path: /root/{{ cluster_name }}
      state: directory
      owner: root
      group: root
      mode: '0755'

    - name: Copy install-config.yaml to install-dir
      ansible.builtin.copy:
        src: /root/install-config.yaml
        dest: /root/{{ cluster_name }}/install-config.yaml
        owner: root
        group: root
        mode: '0640'
        remote_src: true

#    - name: Create manifest files
#      ansible.builtin.shell:
#        cmd: PATH=$PATH:/root/bin openshift-install --dir {{ cluster_name}} create manifests
#      args:
#        chdir: /root/

  - name: Create ignition files
    ansible.builtin.shell:
      cmd: PATH=$PATH:/root/bin openshift-install --dir {{ cluster_name }} create ignition-configs
    args:
      chdir: /root/

  - name: Copy ignition files to http server
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: /var/www/html
      owner: apache
      group: apache
      mode: '0664'
      remote_src: yes
    with_items:
      - /root/{{ cluster_name }}/bootstrap.ign
      - /root/{{ cluster_name }}/master.ign
      - /root/{{ cluster_name }}/worker.ign

  when: not ignition_files.stat.exists
